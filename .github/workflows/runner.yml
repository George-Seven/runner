name: Runner
on:
#  schedule:
#    - cron: "0 */5 * * *"
  workflow_dispatch:
    inputs:
      onion_url_secret:
        description: 'Onion URL Secret'
        required: false
        type: string
      act_token_secret:
        description: 'Act Token Secret'
        required: false
        type: string

concurrency:
  group: runner
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ONION_URL_SECRET: "${{ github.event.inputs.onion_url_secret }}"
      ACT_TOKEN_SECRET: "${{ github.event.inputs.act_token_secret }}"
    steps:
      - name: Runner
        run: |
          decrypt() {
              echo -n "$1" | openssl enc -aes-256-cbc -d -pbkdf2 -pass pass:"${{ secrets.RUNNER_TOKEN }}" -base64 -A
          }
          ONION_URL=$(decrypt "$ONION_URL_SECRET")
          ACT_TOKEN=$(decrypt "$ACT_TOKEN_SECRET")
          sudo wget -O /usr/local/bin/onionpipe https://github.com/cmars/onionpipe/releases/download/v1.1.11/onionpipe-linux-amd64-static
          sudo chmod 755 /usr/local/bin/onionpipe
          sudo wget -O /usr/local/bin/act_runner https://gitea.com/gitea/act_runner/releases/download/v0.2.11/act_runner-0.2.11-linux-amd64
          sudo chmod 755 /usr/local/bin/act_runner
          
          if [[ -z "$ONION_URL" ]]; then
            echo "No Onion URL provided."
            exit 1
          fi
          
          echo "Starting onionpipe ..."
          
          start-stop-daemon --start --background --chdir "$(dirname "$(mktemp --dry-run)")" --output $(pwd)/onion_url.txt --exec "$(which onionpipe)" -- "$ONION_URL"~4444

          while true; do
              if grep -Eq '[a-z0-9]+\.onion' ./onion_url.txt 2>/dev/null; then
                  break
              fi
              sleep 1
          done
          
          echo "Starting act_runner ..."
          
          echo '
          runner:
            file: .runner
            capacity: 1
            timeout: 3h
            shutdown_timeout: 0s
            insecure: true
            fetch_timeout: 5s
            fetch_interval: 2s
            labels:
              - "ubuntu-latest:docker://gitea/runner-images:ubuntu-latest"
              - "ubuntu-22.04:docker://gitea/runner-images:ubuntu-22.04"
              - "ubuntu-20.04:docker://gitea/runner-images:ubuntu-20.04"
          
          cache:
            enabled: true
            dir: ""
            host: ""
            port: 0
            external_server: ""
          
          container:
            network: "host"
            privileged: false
            workdir_parent:
            valid_volumes: []
            docker_host: ""
            force_pull: true
            force_rebuild: false
          ' > config.yaml
          #echo -e "http://localhost:4444/\n$ACT_TOKEN\nrunner\n\n" | act_runner -c config.yaml register
          #start-stop-daemon --start --background  --chdir "$(pwd)" --exec "$(which act_runner)" -- -c config.yaml daemon
          act_runner register --no-interactive --instance http://localhost:4444/ --token "$ACT_TOKEN"
          act_runner -c config.yaml daemon 2>&1

          while true; do
              echo "Running" >/dev/null 2>&1
              sleep 10
          done
